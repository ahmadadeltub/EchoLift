#include <Stepper.h>
#include "SevSeg.h"
SevSeg sevseg; 

 

const int stepsPerRevolution = 399;

 

Stepper myStepper(stepsPerRevolution, 25, 27, 29, 31);

 

const int trigPin = 37;
const int echoPin = 35;
long duration;
int distance;
int safetydistance;

 

const int Ground = 3;
const int First = 4;
const int Second = 5;
const int Third = 6;
const int Fourth = 7;
const int Fifth = 2;

 

int CHECKGround = 0;
int CHECKFirst = 0;
int CHECKSecond = 0;
int CHECKThird = 0;
int CHECKFourth = 0;
int CHECHFifth = 0;

 

int Floor = 0 ;
int Location = 0;
int count ;
int clean = 0;
const int GFStats = 24;
int GF ;

 

 

 

void setup() {
  myStepper.setSpeed(80);
  Serial.begin(9600);

 

  pinMode (trigPin, OUTPUT);
  pinMode (echoPin, INPUT);

 

  pinMode(Ground , INPUT);
  pinMode(First , INPUT);
  pinMode(Second , INPUT);
  pinMode(Third , INPUT);
  pinMode(Fourth , INPUT);
  pinMode(Fifth , INPUT);

 

  pinMode(8 , OUTPUT);
  pinMode(13 , OUTPUT);

 

  pinMode(26 , OUTPUT);
  
  pinMode(GFStats , INPUT);

 

  

 


  byte numDigits = 1;
  byte digitPins[] = {};
  byte segmentPins[] = {49, 47, 41, 43, 45, 51, 53, 39};
  bool resistorsOnSegments = true;

 

  byte hardwareConfig = COMMON_CATHODE; 
  sevseg.begin(hardwareConfig, numDigits, digitPins, segmentPins, resistorsOnSegments);
  sevseg.setBrightness(90);

 

  Gfloor();
//digitalWrite(23, HIGH);
//digitalWrite(33, HIGH);

 

}

 


void loop() {

 


      
//stepsPerRevolution == 455;

 

//Stepper myStepper(stepsPerRevolution, 25, 27, 29, 31);

 

  digitalWrite(26, LOW);
  delay(500),
 
  digitalWrite (trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite (trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite (trigPin, LOW);

 

  duration = pulseIn(echoPin, HIGH);
  
  distance = duration * 0.034/2;
  safetydistance = distance;
  if (distance <=30)
 {
  int i = 0;
    for( ; i < 6; )
    {
        sevseg.setNumber(i, i%2);        
        sevseg.refreshDisplay(); 
        delay(1000);

 

          digitalWrite (trigPin, LOW);
          delayMicroseconds(2);
          digitalWrite (trigPin, HIGH);
          delayMicroseconds(10);
          digitalWrite (trigPin, LOW);

 

          duration = pulseIn(echoPin, HIGH);
  
          distance = duration * 0.034/2;
          safetydistance = distance;
    
      if (distance <=30)
      {
        i = i + 1;
        }
       else
       {
        Floor = i;
        i = 7;
       }
    }  
  }
  else
  {

 

   
   }

 


   

 

  CHECKGround = digitalRead(Ground);
  CHECKFirst = digitalRead(First);
  CHECKSecond = digitalRead(Second);
  CHECKThird = digitalRead(Third);
  CHECKFourth = digitalRead(Fourth);
  CHECHFifth = digitalRead(Fifth);

 

//  Serial.println("Wating");

 


  if (CHECKGround == HIGH)
  {
     Floor = 0;
     Serial.println("Floor");
     Serial.println(Floor);
     Serial.println("Location");
     Serial.println(Location);
  }
  if (CHECKFirst == HIGH)
  {
     Floor = 1;
     Serial.println("Floor");
     Serial.println(Floor);
     Serial.println("Location");
     Serial.println(Location);
  }
  if (CHECKSecond == HIGH)
  {
     Floor = 2;
     Serial.println("Floor");
     Serial.println(Floor);
     Serial.println("Location");
     Serial.println(Location);
  }
  if (CHECKThird == HIGH)
  {
     Floor = 3;
     Serial.println("Floor");
     Serial.println(Floor);
     Serial.println("Location");
     Serial.println(Location);
  }
  if (CHECKFourth == HIGH)
  {
     Floor = 4;
     Serial.println("Floor");
     Serial.println(Floor);
     Serial.println("Location");
     Serial.println(Location);
  }

 

 

  if (CHECHFifth == HIGH)
  {
     Floor = 5;
     Serial.println("Floor");
     Serial.println(Floor);
     Serial.println("Location");
     Serial.println(Location);
  }

 


if (Floor == Location)
{
  Serial.println("Already in Place");
}
else 
{
 if (clean == 0)
 {
  if (Floor > Location)
     {
      digitalWrite(23, HIGH);
      digitalWrite(33, HIGH);

 

      delay(700),

 

      digitalWrite(26, HIGH);
      delay(300),
  
      count = Floor - Location;
      Serial.println("count");
      Serial.println(count);
      
      Serial.println("clockwise");
      myStepper.step(stepsPerRevolution * count);
      //myStepper.setSpeed(0);
            
      Location = Floor + 0;
      Serial.println("Done");

 

      delay(700),

 

      digitalWrite(23, LOW);
      digitalWrite(33, LOW);

 

      delay(300),
      digitalWrite(26, LOW);

 


      sevseg.setNumber(Location, Location%2);        
      sevseg.refreshDisplay(); 
     }

 

  else
  {
    if (Floor < Location)
     {

 

      digitalWrite(23, HIGH);
      digitalWrite(33, HIGH);
  
      delay(700),

 

      digitalWrite(26, HIGH);

 

      delay(300),
      
      count = Location - Floor;
      Serial.println("count");
      Serial.println(count);
      
      Serial.println("counterclockwise");
      myStepper.step(-stepsPerRevolution * count);
      //myStepper.setSpeed(0);

 

     Location = Floor + 0;    
     Serial.println("Done");

 

     delay(700),

 

      digitalWrite(23, LOW);
      digitalWrite(33, LOW);

 

      delay(300),
      digitalWrite(26, LOW);
     

 

     sevseg.setNumber(Location, Location%2);        
     sevseg.refreshDisplay(); 

 

     }
  }
 }
  else
  {
  }
  }

 

}

 

void Gfloor()
{
  const int stepsPerRevolution = 1;
  delay(3000);
  int x = 1;

 

  GF = digitalRead(GFStats);
      if (GF == HIGH)
      {
        digitalWrite(23, HIGH);
        digitalWrite(33, HIGH);

 

        
      }

 

 for ( ; x == 1; )
 {
  GF = digitalRead(GFStats);

 

  if (GF == HIGH)
  {     
    
    myStepper.step(-stepsPerRevolution);

 

    
  }
  else
  {
    x = 0;

 

    sevseg.setNumber(0, 0%2);        
    sevseg.refreshDisplay(); 

 

     
  }
}

 

digitalWrite(23, LOW);
digitalWrite(33, LOW);

 

//const int stepsPerRevolution = 1;

 }
 
