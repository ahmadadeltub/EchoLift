#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsClient.h> //  https://github.com/kakopappa/sinric/wiki/How-to-add-dependency-libraries 
#include <ArduinoJson.h> // https://github.com/kakopappa/sinric/wiki/How-to-add-dependency-libraries

 

ESP8266WiFiMulti WiFiMulti;
WebSocketsClient webSocket;
WiFiClient client;

 

#define MyApiKey "ecb2da9c-2595-4674-a1d1-99c9984388a2" // TODO: Change to your sinric API Key. Your API Key is displayed on sinric.com dashboard
#define MySSID "atb" // TODO: Change to your Wifi network SSID
#define MyWifiPassword "123456789111" // TODO: Change to your Wifi network password

 

#define API_ENDPOINT "http://sinric.com"

 

#define HEARTBEAT_INTERVAL 300000 // 5 Minutes 

 

uint64_t heartbeatTimestamp = 0;
bool isConnected = false;
/*
const int Firstfloor = D0;
const int Secondfloor = D1;
const int Thirdfloor = D2;
const int Forthfloor = D3;
const int Groundfloor = D4;
*/

 

const int Groundfloor = D0;
const int Firstfloor = D1;
const int Secondfloor = D2;
const int Thirdfloor = D3;
const int Forthfloor = D4;

 

 

 

void turnOn(String deviceId) {
  /*****fist floor*******/
  if (deviceId == "5fbe1c7aaedf812fa2c184b5") // Device ID of first device
  {
    Serial.print("FirstFloor turned on");
    digitalWrite(Firstfloor, HIGH);
    delay (1500);
    digitalWrite(Firstfloor, LOW);
  }
  /*****fist floor*******/

 

  else if (deviceId == "5fbe1c80aedf812fa2c184b7") // Device ID of second device
  {
    Serial.print("Second Floor turned on");
    digitalWrite(Secondfloor, HIGH);
    delay (1500);
    digitalWrite(Secondfloor, LOW);
  }
  else if (deviceId == "5fbe1c87aedf812fa2c184b9") // Device ID of third device
  {
    Serial.print("Third Floor turned on");
    digitalWrite(Thirdfloor, HIGH);
    delay (1500);
    digitalWrite(Thirdfloor, LOW);
    
  }
    else if (deviceId == "5fbe1c94aedf812fa2c184bc") // Device ID of forth device
  {
    Serial.print("Forth Floor turned on");
    digitalWrite(Forthfloor, HIGH);
    delay (1500);
    digitalWrite(Forthfloor, LOW);
  }
      else if (deviceId == "5fbe1c9eaedf812fa2c184be") // Device ID of Ground device
  {
    Serial.print("ground Floor turned on");
    digitalWrite(Groundfloor, HIGH);
    delay (1500);
    digitalWrite(Groundfloor, LOW);
  }

 

}

 

void turnOff(String deviceId) {
  /*****fist floor*******/

 

  if (deviceId == "5fbe1c7aaedf812fa2c184b5") // Device ID of first device
  {
    Serial.print("first Light turned off");
    digitalWrite(Firstfloor, LOW);
  }
  /*****fist floor*******/

 

  else if (deviceId == "5fbe1c80aedf812fa2c184b7") // Device ID of second device
  {
    Serial.print("Second Light turned off");
    digitalWrite(Secondfloor, LOW);
  }
  else if (deviceId == "5fbe1c87aedf812fa2c184b9") // Device ID of third device
  {
    Serial.print("third Light turned off");
    digitalWrite(Thirdfloor, LOW);
  }
    else if (deviceId == "5fbe1c94aedf812fa2c184bc") // Device ID of forth device
  {
    Serial.print("Forth Light turned off");
    digitalWrite(Forthfloor, LOW);
  }
    else if (deviceId == "5fbe1c9eaedf812fa2c184be") // Device ID of Ground device
  {
    Serial.print("Ground Light turned off");
    digitalWrite(Groundfloor, LOW);
  }

 

}

 

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      isConnected = false;
      Serial.printf("[WSc] Webservice disconnected from sinric.com!\n");
      break;
    case WStype_CONNECTED: {
        isConnected = true;
        Serial.printf("[WSc] Service connected to sinric.com at url: %s\n", payload);
        Serial.printf("Waiting for commands from sinric.com ...\n");
      }
      break;
    case WStype_TEXT: {
        Serial.printf("[WSc] get text: %s\n", payload);
        // Example payloads

 

        // For Light device type
        // {"deviceId": xxxx, "action": "setPowerState", value: "ON"} // https://developer.amazon.com/docs/device-apis/alexa-powercontroller.html
        // {"deviceId": xxxx, "action": "AdjustBrightness", value: 3} // https://developer.amazon.com/docs/device-apis/alexa-brightnesscontroller.html
        // {"deviceId": xxxx, "action": "setBrightness", value: 42} // https://developer.amazon.com/docs/device-apis/alexa-brightnesscontroller.html
        // {"deviceId": xxxx, "action": "SetColor", value: {"hue": 350.5,  "saturation": 0.7138, "brightness": 0.6501}} // https://developer.amazon.com/docs/device-apis/alexa-colorcontroller.html
        // {"deviceId": xxxx, "action": "DecreaseColorTemperature"} // https://developer.amazon.com/docs/device-apis/alexa-colortemperaturecontroller.html
        // {"deviceId": xxxx, "action": "IncreaseColorTemperature"} // https://developer.amazon.com/docs/device-apis/alexa-colortemperaturecontroller.html
        // {"deviceId": xxxx, "action": "SetColorTemperature", value: 2200} // https://developer.amazon.com/docs/device-apis/alexa-colortemperaturecontroller.html

 

#if ARDUINOJSON_VERSION_MAJOR == 5
        DynamicJsonBuffer jsonBuffer;
        JsonObject& json = jsonBuffer.parseObject((char*)payload);
#endif
#if ARDUINOJSON_VERSION_MAJOR == 6
        DynamicJsonDocument json(1024);
        deserializeJson(json, (char*) payload);
#endif
        String deviceId = json ["deviceId"];
        String action = json ["action"];

 

        if (action == "setPowerState") { // Switch or Light
          String value = json ["value"];
          if (value == "ON") {
            turnOn(deviceId);
          } else {
            turnOff(deviceId);
          }
        }
        else if (action == "SetBrightness") {
          String brightness = json ["value"];
          Serial.println("Brightness set to: " + brightness);
        }
        else if (action == "test") {
          Serial.println("[WSc] received test command from sinric.com");
        }
      }
      break;
    case WStype_BIN:
      Serial.printf("[WSc] get binary length: %u\n", length);
      break;
    default: break;
  }
}

 

void setup() {
  Serial.begin(115200);

 

  WiFiMulti.addAP(MySSID, MyWifiPassword);
  Serial.println();
  Serial.print("Connecting to Wifi: ");
  Serial.println(MySSID);

 

  // Waiting for Wifi connect
  while (WiFiMulti.run() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  if (WiFiMulti.run() == WL_CONNECTED) {
    Serial.println("");
    Serial.print("WiFi connected. ");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
  }

 

  // server address, port and URL
  webSocket.begin("iot.sinric.com", 80, "/");

 

  // event handler
  webSocket.onEvent(webSocketEvent);
  webSocket.setAuthorization("apikey", MyApiKey);

 

  // try again every 5000ms if connection has failed
  webSocket.setReconnectInterval(5000);   // If you see 'class WebSocketsClient' has no member named 'setReconnectInterval' error update arduinoWebSockets
  pinMode(Firstfloor, OUTPUT);
  pinMode(Secondfloor, OUTPUT);
  pinMode(Thirdfloor, OUTPUT);
  pinMode(Forthfloor, OUTPUT);
  pinMode(Groundfloor, OUTPUT);
}

 

void loop() {
  webSocket.loop();

 

  if (isConnected) {
    uint64_t now = millis();

 

    // Send heartbeat in order to avoid disconnections during ISP resetting IPs over night. Thanks @MacSass
    if ((now - heartbeatTimestamp) > HEARTBEAT_INTERVAL) {
      heartbeatTimestamp = now;
      webSocket.sendTXT("H");
    }
  }
}
